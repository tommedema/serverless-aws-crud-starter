frameworkVersion: '=1.24.1'

service: ${{file(../../package.json):name}}-domains

# print a warning if the given domain's nameservers are not yet set
plugins:
  - warn-nameservers
    
provider:
  name: aws
  stage: ${{opt:stage, 'dev'}}
  region: ${{opt:region, 'eu-west-2'}}
  
  # use ${{}} to access serverless variables
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
      
  stackTags:
    SERVICE: ${{self:service}}
    STAGE: ${{self:provider.stage}}
    REGION: ${{self:provider.region}}
    VERSION: ${{file(./package.json):version}}

custom:
  projectName: ${{file(../../package.json):name}}
  slsConfig: ${{file(../../package.json):slsConfig}}
          
resources:
  
  Conditions:
    
    # true when a domain should be setup (route53 hosted zone etc.)
    ShouldSetupDomain:
      Fn::Not:
        - Fn::Equals:
          - ${{self:custom.slsConfig.domains.${{self:provider.stage}}.name, 'none'}}
          - 'none'
          
    # true when a ssl certificate is being requested
    ShouldRequestCertificate:
      Fn::And:
        - Condition: ShouldSetupDomain
        - Fn::Equals:
          - ${{cf:${{self:custom.projectName}}-ssl-${{self:provider.stage}}.ShouldRequestCertificate}}
          - 'true'
      
    # true when a ssl certificate should be used    
    ShouldConsumeCertificate:
      Fn::And:
        - Condition: ShouldSetupDomain
        - Fn::Equals:
          - ${{cf:${{self:custom.projectName}}-ssl-${{self:provider.stage}}.ShouldConsumeCertificate}}
          - 'true'
   
  Resources:
    
    # if a domain is set: route 53 hosted zone
    WebHostedZone:
      Type: AWS::Route53::HostedZone
      Condition: ShouldSetupDomain
      Properties:
        Name: ${{self:custom.slsConfig.domains.${{self:provider.stage}}.name, ''}}
    
    # if a domain is set: route 53 hosted zone record set
    # note that the HostedZoneId is fixed for record sets, as described at
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
    WebHostedZoneRecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Condition: ShouldSetupDomain
      Properties:
        HostedZoneId:
          Ref: WebHostedZone
        RecordSets:
        - Type: A
          Name: ${{self:custom.slsConfig.domains.${{self:provider.stage}}.name, ''}}
          AliasTarget:
            DNSName: ${{cf:${{self:custom.projectName}}-web-${{self:provider.stage}}.WebCloudfrontDomainName}}
            HostedZoneId: Z2FDTNDATAQYW2
        - Type: AAAA
          Name: ${{self:custom.slsConfig.domains.${{self:provider.stage}}.name, ''}}
          AliasTarget:
            DNSName: ${{cf:${{self:custom.projectName}}-web-${{self:provider.stage}}.WebCloudfrontDomainName}}
            HostedZoneId: Z2FDTNDATAQYW2
        - Type: A
          Name: www.${{self:custom.slsConfig.domains.${{self:provider.stage}}.name, ''}}
          AliasTarget:
            DNSName:
              Fn::GetAtt: [WebRedirectCloudfrontDist, DomainName]
            HostedZoneId: Z2FDTNDATAQYW2
        - Type: AAAA
          Name: www.${{self:custom.slsConfig.domains.${{self:provider.stage}}.name, ''}}
          AliasTarget:
            DNSName:
              Fn::GetAtt: [WebRedirectCloudfrontDist, DomainName]
            HostedZoneId: Z2FDTNDATAQYW2
            
    # additional route53 record sets for DNS certificate validation
    # note that the HostedZoneId is fixed for record sets, as described at
    # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
    WebHostedZoneCertificateRecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Condition: ShouldRequestCertificate
      Properties:
        HostedZoneId:
          Ref: WebHostedZone
        RecordSets:
        - Type: CNAME
          Name: ${{cf:${{self:custom.projectName}}-ssl-${{self:provider.stage}}.DNSRootRecordName}}
          ResourceRecords:
            - ${{cf:${{self:custom.projectName}}-ssl-${{self:provider.stage}}.DNSRootRecordValue}}
          TTL: '900'
        - Type: CNAME
          Name: ${{cf:${{self:custom.projectName}}-ssl-${{self:provider.stage}}.DNSWWWRecordName}}
          ResourceRecords:
            - ${{cf:${{self:custom.projectName}}-ssl-${{self:provider.stage}}.DNSWWWRecordValue}}
          TTL: '900'
          
    # if a domain is set: s3 bucket used to redirect www traffic to root domain
    WebRedirectBucket:
      Type: AWS::S3::Bucket
      Condition: ShouldSetupDomain
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          RedirectAllRequestsTo:
            HostName: ${{self:custom.slsConfig.domains.${{self:provider.stage}}.name, ''}}
            Protocol:
              Fn::If:
                - ShouldConsumeCertificate
                - https
                - Ref: 'AWS::NoValue'
            
    # if a domain is set: enable public read for web redirect bucket
    WebRedirectBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Condition: ShouldSetupDomain
      Properties:
        Bucket:
          Ref: WebRedirectBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: s3:GetObject
              Resource:
                Fn::Join: ['', [Fn::GetAtt: [WebRedirectBucket, Arn], '/*']]

    # if a domain is set: cloudfront for www redirect s3 bucket
    WebRedirectCloudfrontDist:
      Type: AWS::CloudFront::Distribution
      Condition: ShouldSetupDomain
      Properties:
        DistributionConfig:
          Comment: cloudfront distribution pointing to web redirect s3 bucket
          Aliases:
            - www.${{self:custom.slsConfig.domains.${{self:provider.stage}}.name, ''}}
          Origins:
          - DomainName:
              Fn::Join: ['.', [Ref: WebRedirectBucket, 's3-website', Ref: 'AWS::Region', 'amazonaws.com']]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
          Enabled: true
          HttpVersion: 'http2'
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            Fn::If:
              - ShouldConsumeCertificate
              - AcmCertificateArn: ${{cf:${{self:custom.projectName}}-ssl-${{self:provider.stage}}.CertificateArn}}
                SslSupportMethod: sni-only
              - CloudFrontDefaultCertificate: true
          PriceClass: PriceClass_All
              
  Outputs:
    
    WebHostedZoneId:
      Condition: ShouldSetupDomain
      Description: id of the hosted zone
      Value:
        Ref: WebHostedZone
          
    WebHostedZoneNameServers:
      Condition: ShouldSetupDomain
      Description: name servers to set your domain to
      Value:
        Fn::Join: [',', Fn::GetAtt: [WebHostedZone, NameServers]]
        
    WebRedirectCloudfrontDistId:
      Description: id of the www redirect cloudfront distribution
      Value:
        Ref: WebRedirectCloudfrontDist
        