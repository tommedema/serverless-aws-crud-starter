service: ${{file(../../package.json):name}}-api

plugins:
  
  # transpile functions' ES7 to ES5 for provider runtime compatibility
  - serverless-webpack
        
custom:
  projectName: ${{file(../../package.json):name}}
  slsConfig: ${{file(../../package.json):slsConfig}}
  
  # serverless-webpack config
  webpack:
    webpackConfig: 'webpack.config.js' # location of webpack configuration file
    includeModules: # include external modules into serverless artifact, bypassing webpack
      forceExclude:
        - aws-sdk # exclude aws-sdk because it is pre-installed on AWS lambda
      
package:
  individually: true
    
provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 512
  timeout: 10
  stage: ${{opt:stage, 'dev'}}
  region: ${{opt:region, 'eu-west-2'}}
  
  # use ${{}} to access serverless variables
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  
  environment:
    nodesTableName:
      Ref: NotesTable
      
  stackTags:
    SERVICE: ${{self:service}}
    RUNTIME: ${{self:provider.runtime}}
    STAGE: ${{self:provider.stage}}
    REGION: ${{self:provider.region}}
    VERSION: ${{file(./package.json):version}}
    
  # set a safety limit on API gateway usage
  usagePlan:
    quota:
      limit: 5000
      period: DAY
    throttle:
      burstLimit: 200
      rateLimit: 100
  
  iamRoleStatements:
    
    # manage notes table
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        Fn::GetAtt: [NotesTable, Arn]
      
functions:
  
  create:
    handler: functions/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
          
  get:
    handler: functions/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
          
  list:
    handler: functions/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
          
  update:
    handler: functions/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
          
  delete:
    handler: functions/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
          
resources:
   
  Resources:
                  
    # the dynamodb table used to store notes
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions: # note that only key attributes should be defined
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: noteId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
          -
            AttributeName: noteId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          
    # the s3 bucket used to store note attachments
    # AttachmentsBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     AccelerateConfiguration:
    #       AccelerationStatus: Enabled
    #     CorsConfiguration:
    #       CorsRules:
    #         -
    #           AllowedOrigins:
    #             - '*'
    #           AllowedHeaders:
    #             - '*'
    #           AllowedMethods:
    #             - GET
    #             - PUT
    #             - POST
    #             - DELETE
    #             - HEAD
    #           MaxAge: 3000
              
  Outputs:
    # AttachmentsBucketName:
    #   Description: name of the attachments s3 bucket
    #   Value:
    #     Ref: AttachmentsBucket
    
    RestApiArn:
      Description: arn of the API gateway rest API
      Value:
        Fn::Join:
          - ':'
          -
            - 'arn:aws:execute-api'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - Ref: ApiGatewayRestApi
        